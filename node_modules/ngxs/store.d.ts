import { ErrorHandler } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { Subscription } from 'rxjs/Subscription';
import { Actions } from './actions-stream';
import { StateFactory } from './state-factory';
import { StateStream } from './state-stream';
import { PluginManager } from './plugin-manager';
export declare class Store {
    private _errorHandler;
    private _actions;
    private _storeFactory;
    private _stateStream;
    private _pluginManager;
    constructor(_errorHandler: ErrorHandler, _actions: Actions, _storeFactory: StateFactory, _stateStream: StateStream, _pluginManager: PluginManager);
    /**
     * Dispatches event(s).
     */
    dispatch(event: any | any[]): Observable<any>;
    /**
     * Selects a slice of data from the store.
     */
    select<T>(selector: (state: any) => T): Observable<T>;
    select(selector: string | any): Observable<any>;
    /**
     * Select one slice of data from the store.
     */
    selectOnce<T>(selector: (state: any) => T): Observable<T>;
    selectOnce(selector: string | any): Observable<any>;
    /**
     * Allow the user to subscribe to the root of the state
     */
    subscribe(fn?: any): Subscription;
    private _dispatch(action);
    private _dispatchActions(action);
    private _handleNesting(eventResults);
}
