import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs/Observable';
export declare const ROOT_STATE_TOKEN: InjectionToken<any>;
export declare const FEATURE_STATE_TOKEN: InjectionToken<any>;
export declare const META_KEY = "NGXS_META";
export declare type NgxsPluginConstructor = new (...args: any[]) => NgxsPlugin;
export interface NgxsOptions {
    plugins: Array<NgxsPluginConstructor | NgxsPluginFn>;
}
export interface StateContext<T> {
    /**
     * Get the current state.
     */
    getState(): T;
    /**
     * Reset the state to a new value.
     */
    setState(val: T): any;
    /**
     * Patch the existing state with the provided value.
     */
    patchState(val: Partial<T>): any;
    /**
     * Dispatch a new action and return the dispatched observable.
     */
    dispatch(actions: any | any[]): Observable<void>;
}
export declare type NgxsNextPluginFn = (state: any, mutation: any) => any;
export interface NgxsPlugin {
    /**
     * Handle the state/action before its submitted to the state handlers.
     */
    handle(state: any, action: any, next: NgxsNextPluginFn): any;
}
export declare const NGXS_PLUGINS: InjectionToken<{}>;
export declare type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;
export interface StoreOptions<T> {
    /**
     * Name of the state. Required.
     */
    name: string;
    /**
     * Default values for the state. If not provided, uses empty object.
     */
    defaults?: T;
    /**
     * Sub states for the given state.
     */
    children?: any[];
}
